{"mappings":"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","sources":["index.js","lib/index.js","lib/has.js","lib/utilities/accessProperty.js","lib/by.js","lib/to.js"],"sourcesContent":["import { has, by, to } from './lib'\n\nconsole.log({ has, by, to })\n","export { default as has } from './has'\nexport { default as by } from './by'\nexport { default as to } from './to'\n","import accessProperty from './utilities/accessProperty'\n\nfunction isValidValue (value) {\n  if (Array.isArray(value)) return (value.length > 0)\n  if (typeof value === 'object') return (Object.keys(value).length > 0)\n  return !!value\n}\n\nfunction containsValue (object, property) {\n  let shouldBeInversed = false\n  let path = property\n\n  // properties starting with ! should return true\n  // if the property is not present\n  if (path.startsWith('!')) {\n    path = path.slice(1)\n    shouldBeInversed = true\n  }\n\n  const value = accessProperty(object, path)\n  const isValid = isValidValue(value)\n\n  if (shouldBeInversed) return !isValid\n  return isValid\n}\n\nconst has = (...properties) => (\n  object => (\n    properties.every(property => containsValue(object, property))\n  )\n)\n\nexport default has\n","// accessProperty()\n// used to access a property of an object that may be deeply nested\n// if the property does not exist, returns undefined\n\n/* Example:\n\n   const user = {\n     profile: {\n       firstName: \"Helen\"\n     }\n   }\n\n   accessProperty(user, \"profile.firstName\")   // \"Helen\"\n*/\n\nconst accessProperty = (object, propertyPath) => {\n  if (!object || typeof object !== 'object') {\n    throw new TypeError(`Expected an Object. Instead got ${typeof object}.`)\n  }\n\n  if (typeof propertyPath !== 'string') {\n    throw new TypeError(`Expected property path to be a string. Instead got ${typeof propertyPath}.`)\n  }\n\n  return propertyPath\n    .split('.')\n    .reduce(\n      (result, step) => result && result[step],\n      object\n    )\n}\n\nexport default accessProperty\n","import accessProperty from './utilities/accessProperty'\n\n// simpleSort()\n// accepts objects and a key\n// sorts ascending by default, but key can start\n// with '>' or '<' to specifically assign an order\n\nconst simpleSort = (objectA, objectB, property) => {\n  let method = 'ascending'\n  let path = property\n\n  if (path.startsWith('>')) {\n    method = 'descending'\n    path = path.slice(1)\n  }\n  if (path.startsWith('<')) {\n    method = 'ascending'\n    path = path.slice(1)\n  }\n\n  const a = accessProperty(objectA, path)\n  const b = accessProperty(objectB, path)\n\n  if (method === 'ascending') {\n    if (a > b) return 1\n    if (a < b) return -1\n  }\n  if (method === 'descending') {\n    if (a < b) return 1\n    if (a > b) return -1\n  }\n  return 0\n}\n\n// sort()\n// accepts a series of strings or custom sorting functions\n// sorts on all conditions passed in order\n\n// for example <array>.sort(sort('contribution', 'name', 'age'))\n// would sort array first by contribution, then by name, then by age\n\nconst by = (...properties) => (\n  (objectA, objectB) => {\n    for (const property of properties) {\n      let sortResult = 0\n\n      if (typeof property === 'string') {\n        sortResult = simpleSort(objectA, objectB, property)\n      }\n      if (typeof property === 'function') {\n        sortResult = property(objectA, objectB)\n      }\n\n      if (sortResult === 1 || sortResult === -1) {\n        return sortResult\n      }\n    }\n    return 0\n  }\n)\n\nexport default by\n","import accessProperty from './utilities/accessProperty'\n\nfunction to (...keys) {\n  return (object => {\n    if (keys.length === 1) {\n      return accessProperty(object, keys[0])\n    }\n\n    return keys.reduce((result, key) => {\n      result[key] = accessProperty(object, key)\n      return result\n    }, {})\n  })\n}\n\nexport default to\n"],"names":[],"version":3,"file":"data-helpers.js.map"}